quarkus:
  oidc:
    auth-server-url: "http://localhost:8080/realms/AuthService"  # URL del realm en Keycloak
    client-id: "auth-service-client"  # ID del cliente configurado en Keycloak
    credentials:
      secret: "LHoI81AiwTsGdrFAn4chBZYbodNYuvjD"  # Client Secret generado por Keycloak
    tls:
      verification: none  # Solo en local, quitar en producción
    application-type: service  # API protegida (no frontend)
    authentication:
      user-info-required: false  # Debe ser FALSE para tokens JWT (no consultas adicionales)
      verify-access-token-audience: true  # Validación obligatoria de audience
    token:
      principal-claim: preferred_username  # Campo para el usuario en SecurityContext
      role-claim-path: realm_access.roles  # ⚠️ Aquí es donde realmente se mapean los roles desde el token

  mongodb:
    connection-string: "mongodb://localhost:27017"
    database: "auth-db"

  kafka:
    bootstrap-servers: "localhost:9092"
    consumer:
      auto-offset-reset: "earliest"

  redis:
    hosts: "redis://localhost:6379"
    timeout: "10s"
    client-name: "auth-redis-client"

  opentelemetry:
    enabled: false
    tracer:
      exporter:
        otlp:
          endpoint: "http://localhost:4317"
          protocol: "grpc"
      resource-attributes: "service.name=auth-service"

  http:
    port: 8083

  log:
    level: "INFO"
    console:
      enable: true
      color: true
      level: "INFO"
    category:
      "io.quarkus.oidc":
        level: DEBUG
      "io.quarkus.security":
        level: DEBUG

resilience4j.circuitbreaker:
  instances:
    userClient:
      slidingWindowSize: 10
      failureRateThreshold: 50
      waitDurationInOpenState: 10s

resilience4j.retry:
  instances:
    userClient:
      maxAttempts: 3
      waitDuration: 2s
