version: '3.9'

networks:
  backend-network:
    driver: bridge

services:

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: keycloak
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: start-dev
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 5s
      retries: 10


  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"     # Expuesto al host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # ✅ Listeners (un puerto interno y uno externo)
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092

      # Mapea el protocolo de comunicación
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - backend-network



  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - backend-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "9464:9464" # => expone las métricas para Prometheus
    networks:
      - backend-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - backend-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - backend-network

  vault:
    image: hashicorp/vault:1.15.2
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - backend-network

  filebeat:
    image: custom-filebeat:8.13.4
    container_name: filebeat
    user: root
    volumes:
      - ./logs:/usr/share/filebeat/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - backend-network

  mongo:
    image: mongo:7.0
    container_name: mongo
    ports:
      - "27018:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend-network

  auth-service:
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.jvm
    image: auth-service
    container_name: auth-service
    ports:
      - "8083:8083"
    volumes:
      - ./logs:/app/logs
    environment:
      - OIDC_URL=http://keycloak:8080/realms/AuthService
      - OIDC_SECRET=qCvlzdDYsczWeLmoGEkEXhus9kmH4lV5
      - QUARKUS_VAULT_URL=http://vault:8200
      - QUARKUS_MONGODB_CONNECTION_STRING=mongodb://mongo:27017
      - QUARKUS_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - QUARKUS_HTTP_PORT=8083
      - QUARKUS_MICROMETER_ENABLED=true
      - QUARKUS_MICROMETER_REGISTRY_PROMETHEUS_ENABLED=true
      - QUARKUS_MANAGEMENT_ENABLED=true
      - QUARKUS_MANAGEMENT_ENDPOINTS_ALL_ENABLED=true
    depends_on:
      keycloak:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
      vault:
        condition: service_started
      otel-collector:
        condition: service_started
    networks:
      - backend-network

volumes:
  mongo-data:
